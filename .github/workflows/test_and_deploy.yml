on:
  workflow_call:
    inputs:
      access-id:
        required: true
        type: string
        description: 'The AKeyless access id to use to login to AKeyless'
      aws-producer-path:
        required: true
        type: string
        description: 'The path to the AWS producer in AKeyless.  It will be used to fetch AWS credentials for the deployment'
      migration-function-name:
        required: true
        type: string
        description: 'The name of the Lambda used for performing database migrations'
      access-type:
        type: string
        description: 'The access type to use to login to AKeyless (jwt or aws_iam)'
        default: 'jwt'
      python-version:
        type: string
        description: 'The python version to use'
        default: '3.8'
jobs:
  test_python:
    runs-on: ubuntu-latest
    name: Python Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pipenv wheel
          cd python
          pipenv lock -r > requirements.txt
          cat requirements.txt
          pip install -r requirements.txt
      - name: Test
        run: cd python && ./test.py
  test_mygrations:
    runs-on: ubuntu-latest
    name: Check DB Schema
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install mygrations
        run: python -m pip install --upgrade mygrations
      - name: Check
        run: |
          echo 'files_directory = "sql/"' > mygrate.conf
          echo 'env_file = ".env"' >> mygrate.conf
          wget 'https://raw.githubusercontent.com/cmancone/mygrations/5e63700ca5ab179dd57f9e6fcd07fce526def7d3/mygrate.py'
          chmod a+x mygrate.py
          ./mygrate.py check
  terraform_plan:
    runs-on: ubuntu-latest
    name: Terraform Plan
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to AWS
        id: fetch-secrets
        uses: cmancone/akeyless-action@v1
        with:
          access-id: ${{ inputs.access-id }}
          producer-for-aws-access: ${{ inputs.aws-producer-path }}
          access-type: ${{ inputs.access-type }}
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pipenv wheel
          cd python
          zip -r ../terraform/python.zip * -x ./.env
          pipenv lock -r > requirements.txt
          cat requirements.txt
          pip3 install -r requirements.txt -t ./packages
          rm -Rf ./packages/boto3
          rm -Rf ./packages/botocore
          cd ./packages
          zip -r ../../terraform/python.zip *
      - name: Init
        id: terraform-init
        run: cd ./terraform && terraform init
      - name: Plan
        id: terraform-plan
        run: cd ./terraform && terraform plan -no-color
  mygrate:
    if: github.ref == ${{ github.event.repository.default_branch }}
    runs-on: ubuntu-latest
    needs: [test_python, test_mygrations, terraform_plan]
    permissions:
      id-token: write
      contents: read
    name: Mygrate Database
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to AWS
        id: fetch-secrets
        uses: cmancone/akeyless-action@v1
        with:
          access-id: ${{ inputs.access-id }}
          producer-for-aws-access: ${{ inputs.aws-producer-path }}
          access-type: ${{ inputs.access-type }}
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pipenv wheel
          cd python
          pipenv lock -r > requirements.txt
          cat requirements.txt
          pip install -r requirements.txt
      - name: Migrate
        run: |
          export sql=$(cat sql/*.sql | tr '\n' ' ' | sed 's/"/\\"/g')
          export payload="{\"command\": \"apply\", \"sql\": \"$sql\"}"
          aws lambda invoke --function-name ${{ inputs.migration-function-name }} --invocation-type RequestResponse --cli-binary-format raw-in-base64-out --payload $payload
  deploy:
    if: github.ref == ${{ github.event.repository.default_branch }}
    needs: [mygrate]
    runs-on: ubuntu-latest
    name: Deploy
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to AWS
        id: fetch-secrets
        uses: cmancone/akeyless-action@v1
        with:
          access-id: ${{ inputs.access-id }}
          producer-for-aws-access: ${{ inputs.aws-producer-path }}
          access-type: ${{ inputs.access-type }}
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pipenv wheel
          cd python
          zip -r ../terraform/python.zip * -x ./.env
          pipenv lock -r > requirements.txt
          cat requirements.txt
          pip3 install -r requirements.txt -t ./packages
          rm -Rf ./packages/boto3
          rm -Rf ./packages/botocore
          cd ./packages
          zip -r ../../terraform/python.zip *
      - name: Init
        id: terraform-init
        run: cd ./terraform && terraform init
      - name: Deploy
        id: terraform-deploy
        run: cd ./terraform && terraform apply --auto-approve
